// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionAlert;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionCors;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionEnv;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionGit;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionGithub;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionGitlab;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionLogDestination;
import com.pulumi.digitalocean.outputs.GetAppSpecFunctionRoute;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAppSpecFunction {
    /**
     * @return Describes an alert policy for the component.
     * 
     */
    private final @Nullable List<GetAppSpecFunctionAlert> alerts;
    /**
     * @return The [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) policies of the app.
     * 
     */
    private final @Nullable GetAppSpecFunctionCors cors;
    /**
     * @return Describes an environment variable made available to an app competent.
     * 
     */
    private final @Nullable List<GetAppSpecFunctionEnv> envs;
    /**
     * @return A Git repo to use as the component&#39;s source. The repository must be able to be cloned without authentication.  Only one of `git`, `github` or `gitlab`  may be set.
     * 
     */
    private final @Nullable GetAppSpecFunctionGit git;
    /**
     * @return A GitHub repo to use as the component&#39;s source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/github/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
     * 
     */
    private final @Nullable GetAppSpecFunctionGithub github;
    /**
     * @return A Gitlab repo to use as the component&#39;s source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/gitlab/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
     * 
     */
    private final @Nullable GetAppSpecFunctionGitlab gitlab;
    /**
     * @return Describes a log forwarding destination.
     * 
     */
    private final @Nullable List<GetAppSpecFunctionLogDestination> logDestinations;
    /**
     * @return The name of the component.
     * 
     */
    private final String name;
    private final List<GetAppSpecFunctionRoute> routes;
    /**
     * @return An optional path to the working directory to use for the build.
     * 
     */
    private final @Nullable String sourceDir;

    @CustomType.Constructor
    private GetAppSpecFunction(
        @CustomType.Parameter("alerts") @Nullable List<GetAppSpecFunctionAlert> alerts,
        @CustomType.Parameter("cors") @Nullable GetAppSpecFunctionCors cors,
        @CustomType.Parameter("envs") @Nullable List<GetAppSpecFunctionEnv> envs,
        @CustomType.Parameter("git") @Nullable GetAppSpecFunctionGit git,
        @CustomType.Parameter("github") @Nullable GetAppSpecFunctionGithub github,
        @CustomType.Parameter("gitlab") @Nullable GetAppSpecFunctionGitlab gitlab,
        @CustomType.Parameter("logDestinations") @Nullable List<GetAppSpecFunctionLogDestination> logDestinations,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("routes") List<GetAppSpecFunctionRoute> routes,
        @CustomType.Parameter("sourceDir") @Nullable String sourceDir) {
        this.alerts = alerts;
        this.cors = cors;
        this.envs = envs;
        this.git = git;
        this.github = github;
        this.gitlab = gitlab;
        this.logDestinations = logDestinations;
        this.name = name;
        this.routes = routes;
        this.sourceDir = sourceDir;
    }

    /**
     * @return Describes an alert policy for the component.
     * 
     */
    public List<GetAppSpecFunctionAlert> alerts() {
        return this.alerts == null ? List.of() : this.alerts;
    }
    /**
     * @return The [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) policies of the app.
     * 
     */
    public Optional<GetAppSpecFunctionCors> cors() {
        return Optional.ofNullable(this.cors);
    }
    /**
     * @return Describes an environment variable made available to an app competent.
     * 
     */
    public List<GetAppSpecFunctionEnv> envs() {
        return this.envs == null ? List.of() : this.envs;
    }
    /**
     * @return A Git repo to use as the component&#39;s source. The repository must be able to be cloned without authentication.  Only one of `git`, `github` or `gitlab`  may be set.
     * 
     */
    public Optional<GetAppSpecFunctionGit> git() {
        return Optional.ofNullable(this.git);
    }
    /**
     * @return A GitHub repo to use as the component&#39;s source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/github/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
     * 
     */
    public Optional<GetAppSpecFunctionGithub> github() {
        return Optional.ofNullable(this.github);
    }
    /**
     * @return A Gitlab repo to use as the component&#39;s source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/gitlab/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
     * 
     */
    public Optional<GetAppSpecFunctionGitlab> gitlab() {
        return Optional.ofNullable(this.gitlab);
    }
    /**
     * @return Describes a log forwarding destination.
     * 
     */
    public List<GetAppSpecFunctionLogDestination> logDestinations() {
        return this.logDestinations == null ? List.of() : this.logDestinations;
    }
    /**
     * @return The name of the component.
     * 
     */
    public String name() {
        return this.name;
    }
    public List<GetAppSpecFunctionRoute> routes() {
        return this.routes;
    }
    /**
     * @return An optional path to the working directory to use for the build.
     * 
     */
    public Optional<String> sourceDir() {
        return Optional.ofNullable(this.sourceDir);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppSpecFunction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetAppSpecFunctionAlert> alerts;
        private @Nullable GetAppSpecFunctionCors cors;
        private @Nullable List<GetAppSpecFunctionEnv> envs;
        private @Nullable GetAppSpecFunctionGit git;
        private @Nullable GetAppSpecFunctionGithub github;
        private @Nullable GetAppSpecFunctionGitlab gitlab;
        private @Nullable List<GetAppSpecFunctionLogDestination> logDestinations;
        private String name;
        private List<GetAppSpecFunctionRoute> routes;
        private @Nullable String sourceDir;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAppSpecFunction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alerts = defaults.alerts;
    	      this.cors = defaults.cors;
    	      this.envs = defaults.envs;
    	      this.git = defaults.git;
    	      this.github = defaults.github;
    	      this.gitlab = defaults.gitlab;
    	      this.logDestinations = defaults.logDestinations;
    	      this.name = defaults.name;
    	      this.routes = defaults.routes;
    	      this.sourceDir = defaults.sourceDir;
        }

        public Builder alerts(@Nullable List<GetAppSpecFunctionAlert> alerts) {
            this.alerts = alerts;
            return this;
        }
        public Builder alerts(GetAppSpecFunctionAlert... alerts) {
            return alerts(List.of(alerts));
        }
        public Builder cors(@Nullable GetAppSpecFunctionCors cors) {
            this.cors = cors;
            return this;
        }
        public Builder envs(@Nullable List<GetAppSpecFunctionEnv> envs) {
            this.envs = envs;
            return this;
        }
        public Builder envs(GetAppSpecFunctionEnv... envs) {
            return envs(List.of(envs));
        }
        public Builder git(@Nullable GetAppSpecFunctionGit git) {
            this.git = git;
            return this;
        }
        public Builder github(@Nullable GetAppSpecFunctionGithub github) {
            this.github = github;
            return this;
        }
        public Builder gitlab(@Nullable GetAppSpecFunctionGitlab gitlab) {
            this.gitlab = gitlab;
            return this;
        }
        public Builder logDestinations(@Nullable List<GetAppSpecFunctionLogDestination> logDestinations) {
            this.logDestinations = logDestinations;
            return this;
        }
        public Builder logDestinations(GetAppSpecFunctionLogDestination... logDestinations) {
            return logDestinations(List.of(logDestinations));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder routes(List<GetAppSpecFunctionRoute> routes) {
            this.routes = Objects.requireNonNull(routes);
            return this;
        }
        public Builder routes(GetAppSpecFunctionRoute... routes) {
            return routes(List.of(routes));
        }
        public Builder sourceDir(@Nullable String sourceDir) {
            this.sourceDir = sourceDir;
            return this;
        }        public GetAppSpecFunction build() {
            return new GetAppSpecFunction(alerts, cors, envs, git, github, gitlab, logDestinations, name, routes, sourceDir);
        }
    }
}
