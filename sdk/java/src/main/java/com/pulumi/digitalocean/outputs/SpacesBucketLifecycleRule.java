// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.SpacesBucketLifecycleRuleExpiration;
import com.pulumi.digitalocean.outputs.SpacesBucketLifecycleRuleNoncurrentVersionExpiration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SpacesBucketLifecycleRule {
    /**
     * @return Specifies the number of days after initiating a multipart
     * upload when the multipart upload must be completed or else Spaces will abort the upload.
     * 
     */
    private final @Nullable Integer abortIncompleteMultipartUploadDays;
    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    private final Boolean enabled;
    /**
     * @return Specifies a time period after which applicable objects expire (documented below).
     * 
     */
    private final @Nullable SpacesBucketLifecycleRuleExpiration expiration;
    /**
     * @return Unique identifier for the rule.
     * 
     */
    private final @Nullable String id;
    /**
     * @return Specifies when non-current object versions expire (documented below).
     * 
     */
    private final @Nullable SpacesBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
    /**
     * @return Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    private final @Nullable String prefix;

    @CustomType.Constructor
    private SpacesBucketLifecycleRule(
        @CustomType.Parameter("abortIncompleteMultipartUploadDays") @Nullable Integer abortIncompleteMultipartUploadDays,
        @CustomType.Parameter("enabled") Boolean enabled,
        @CustomType.Parameter("expiration") @Nullable SpacesBucketLifecycleRuleExpiration expiration,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("noncurrentVersionExpiration") @Nullable SpacesBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration,
        @CustomType.Parameter("prefix") @Nullable String prefix) {
        this.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
        this.enabled = enabled;
        this.expiration = expiration;
        this.id = id;
        this.noncurrentVersionExpiration = noncurrentVersionExpiration;
        this.prefix = prefix;
    }

    /**
     * @return Specifies the number of days after initiating a multipart
     * upload when the multipart upload must be completed or else Spaces will abort the upload.
     * 
     */
    public Optional<Integer> abortIncompleteMultipartUploadDays() {
        return Optional.ofNullable(this.abortIncompleteMultipartUploadDays);
    }
    /**
     * @return Specifies lifecycle rule status.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Specifies a time period after which applicable objects expire (documented below).
     * 
     */
    public Optional<SpacesBucketLifecycleRuleExpiration> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return Unique identifier for the rule.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Specifies when non-current object versions expire (documented below).
     * 
     */
    public Optional<SpacesBucketLifecycleRuleNoncurrentVersionExpiration> noncurrentVersionExpiration() {
        return Optional.ofNullable(this.noncurrentVersionExpiration);
    }
    /**
     * @return Object key prefix identifying one or more objects to which the rule applies.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SpacesBucketLifecycleRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer abortIncompleteMultipartUploadDays;
        private Boolean enabled;
        private @Nullable SpacesBucketLifecycleRuleExpiration expiration;
        private @Nullable String id;
        private @Nullable SpacesBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration;
        private @Nullable String prefix;

        public Builder() {
    	      // Empty
        }

        public Builder(SpacesBucketLifecycleRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUploadDays = defaults.abortIncompleteMultipartUploadDays;
    	      this.enabled = defaults.enabled;
    	      this.expiration = defaults.expiration;
    	      this.id = defaults.id;
    	      this.noncurrentVersionExpiration = defaults.noncurrentVersionExpiration;
    	      this.prefix = defaults.prefix;
        }

        public Builder abortIncompleteMultipartUploadDays(@Nullable Integer abortIncompleteMultipartUploadDays) {
            this.abortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder expiration(@Nullable SpacesBucketLifecycleRuleExpiration expiration) {
            this.expiration = expiration;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder noncurrentVersionExpiration(@Nullable SpacesBucketLifecycleRuleNoncurrentVersionExpiration noncurrentVersionExpiration) {
            this.noncurrentVersionExpiration = noncurrentVersionExpiration;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }        public SpacesBucketLifecycleRule build() {
            return new SpacesBucketLifecycleRule(abortIncompleteMultipartUploadDays, enabled, expiration, id, noncurrentVersionExpiration, prefix);
        }
    }
}
