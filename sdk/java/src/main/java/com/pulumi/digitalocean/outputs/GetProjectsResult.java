// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.GetProjectsFilter;
import com.pulumi.digitalocean.outputs.GetProjectsProject;
import com.pulumi.digitalocean.outputs.GetProjectsSort;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectsResult {
    private final @Nullable List<GetProjectsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return A set of projects satisfying any `filter` and `sort` criteria. Each project has
     * the following attributes:
     * 
     */
    private final List<GetProjectsProject> projects;
    private final @Nullable List<GetProjectsSort> sorts;

    @CustomType.Constructor
    private GetProjectsResult(
        @CustomType.Parameter("filters") @Nullable List<GetProjectsFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("projects") List<GetProjectsProject> projects,
        @CustomType.Parameter("sorts") @Nullable List<GetProjectsSort> sorts) {
        this.filters = filters;
        this.id = id;
        this.projects = projects;
        this.sorts = sorts;
    }

    public List<GetProjectsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A set of projects satisfying any `filter` and `sort` criteria. Each project has
     * the following attributes:
     * 
     */
    public List<GetProjectsProject> projects() {
        return this.projects;
    }
    public List<GetProjectsSort> sorts() {
        return this.sorts == null ? List.of() : this.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectsResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<GetProjectsFilter> filters;
        private String id;
        private List<GetProjectsProject> projects;
        private @Nullable List<GetProjectsSort> sorts;

        public Builder() {
    	      // Empty
        }

        public Builder(GetProjectsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.projects = defaults.projects;
    	      this.sorts = defaults.sorts;
        }

        public Builder filters(@Nullable List<GetProjectsFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetProjectsFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder projects(List<GetProjectsProject> projects) {
            this.projects = Objects.requireNonNull(projects);
            return this;
        }
        public Builder projects(GetProjectsProject... projects) {
            return projects(List.of(projects));
        }
        public Builder sorts(@Nullable List<GetProjectsSort> sorts) {
            this.sorts = sorts;
            return this;
        }
        public Builder sorts(GetProjectsSort... sorts) {
            return sorts(List.of(sorts));
        }        public GetProjectsResult build() {
            return new GetProjectsResult(filters, id, projects, sorts);
        }
    }
}
