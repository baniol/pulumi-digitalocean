// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImagesImage {
    private final String created;
    private final String description;
    /**
     * @return The name of the distribution of the OS of the image.
     * - `min_disk_size`: The minimum &#39;disk&#39; required for the image.
     * - `size_gigabytes`: The size of the image in GB.
     * 
     */
    private final String distribution;
    private final String errorMessage;
    private final Integer id;
    /**
     * @return The id of the image (legacy parameter).
     * 
     */
    private final String image;
    private final Integer minDiskSize;
    private final String name;
    /**
     * @return Is image a public image or not. Public images represent
     * Linux distributions or One-Click Applications, while non-public images represent
     * snapshots and backups and are only available within your account.
     * - `regions`: A set of the regions that the image is available in.
     * - `tags`: A set of tags applied to the image
     * - `created`: When the image was created
     * - `status`: Current status of the image
     * - `error_message`: Any applicable error message pertaining to the image
     * 
     */
    private final Boolean private_;
    private final List<String> regions;
    private final Double sizeGigabytes;
    private final String slug;
    private final String status;
    private final List<String> tags;
    private final String type;

    @CustomType.Constructor
    private GetImagesImage(
        @CustomType.Parameter("created") String created,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("distribution") String distribution,
        @CustomType.Parameter("errorMessage") String errorMessage,
        @CustomType.Parameter("id") Integer id,
        @CustomType.Parameter("image") String image,
        @CustomType.Parameter("minDiskSize") Integer minDiskSize,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("private") Boolean private_,
        @CustomType.Parameter("regions") List<String> regions,
        @CustomType.Parameter("sizeGigabytes") Double sizeGigabytes,
        @CustomType.Parameter("slug") String slug,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tags") List<String> tags,
        @CustomType.Parameter("type") String type) {
        this.created = created;
        this.description = description;
        this.distribution = distribution;
        this.errorMessage = errorMessage;
        this.id = id;
        this.image = image;
        this.minDiskSize = minDiskSize;
        this.name = name;
        this.private_ = private_;
        this.regions = regions;
        this.sizeGigabytes = sizeGigabytes;
        this.slug = slug;
        this.status = status;
        this.tags = tags;
        this.type = type;
    }

    public String created() {
        return this.created;
    }
    public String description() {
        return this.description;
    }
    /**
     * @return The name of the distribution of the OS of the image.
     * - `min_disk_size`: The minimum &#39;disk&#39; required for the image.
     * - `size_gigabytes`: The size of the image in GB.
     * 
     */
    public String distribution() {
        return this.distribution;
    }
    public String errorMessage() {
        return this.errorMessage;
    }
    public Integer id() {
        return this.id;
    }
    /**
     * @return The id of the image (legacy parameter).
     * 
     */
    public String image() {
        return this.image;
    }
    public Integer minDiskSize() {
        return this.minDiskSize;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Is image a public image or not. Public images represent
     * Linux distributions or One-Click Applications, while non-public images represent
     * snapshots and backups and are only available within your account.
     * - `regions`: A set of the regions that the image is available in.
     * - `tags`: A set of tags applied to the image
     * - `created`: When the image was created
     * - `status`: Current status of the image
     * - `error_message`: Any applicable error message pertaining to the image
     * 
     */
    public Boolean private_() {
        return this.private_;
    }
    public List<String> regions() {
        return this.regions;
    }
    public Double sizeGigabytes() {
        return this.sizeGigabytes;
    }
    public String slug() {
        return this.slug;
    }
    public String status() {
        return this.status;
    }
    public List<String> tags() {
        return this.tags;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImagesImage defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String created;
        private String description;
        private String distribution;
        private String errorMessage;
        private Integer id;
        private String image;
        private Integer minDiskSize;
        private String name;
        private Boolean private_;
        private List<String> regions;
        private Double sizeGigabytes;
        private String slug;
        private String status;
        private List<String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetImagesImage defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.created = defaults.created;
    	      this.description = defaults.description;
    	      this.distribution = defaults.distribution;
    	      this.errorMessage = defaults.errorMessage;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.minDiskSize = defaults.minDiskSize;
    	      this.name = defaults.name;
    	      this.private_ = defaults.private_;
    	      this.regions = defaults.regions;
    	      this.sizeGigabytes = defaults.sizeGigabytes;
    	      this.slug = defaults.slug;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder created(String created) {
            this.created = Objects.requireNonNull(created);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder distribution(String distribution) {
            this.distribution = Objects.requireNonNull(distribution);
            return this;
        }
        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Objects.requireNonNull(errorMessage);
            return this;
        }
        public Builder id(Integer id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public Builder minDiskSize(Integer minDiskSize) {
            this.minDiskSize = Objects.requireNonNull(minDiskSize);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder private_(Boolean private_) {
            this.private_ = Objects.requireNonNull(private_);
            return this;
        }
        public Builder regions(List<String> regions) {
            this.regions = Objects.requireNonNull(regions);
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        public Builder sizeGigabytes(Double sizeGigabytes) {
            this.sizeGigabytes = Objects.requireNonNull(sizeGigabytes);
            return this;
        }
        public Builder slug(String slug) {
            this.slug = Objects.requireNonNull(slug);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetImagesImage build() {
            return new GetImagesImage(created, description, distribution, errorMessage, id, image, minDiskSize, name, private_, regions, sizeGigabytes, slug, status, tags, type);
        }
    }
}
