// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegionResult {
    /**
     * @return A boolean value that represents whether new Droplets can be created in this region.
     * 
     */
    private final Boolean available;
    /**
     * @return A set of features available in this region.
     * 
     */
    private final List<String> features;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The display name of the region.
     * 
     */
    private final String name;
    /**
     * @return A set of identifying slugs for the Droplet sizes available in this region.
     * 
     */
    private final List<String> sizes;
    /**
     * @return A human-readable string that is used as a unique identifier for each region.
     * 
     */
    private final String slug;

    @CustomType.Constructor
    private GetRegionResult(
        @CustomType.Parameter("available") Boolean available,
        @CustomType.Parameter("features") List<String> features,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("sizes") List<String> sizes,
        @CustomType.Parameter("slug") String slug) {
        this.available = available;
        this.features = features;
        this.id = id;
        this.name = name;
        this.sizes = sizes;
        this.slug = slug;
    }

    /**
     * @return A boolean value that represents whether new Droplets can be created in this region.
     * 
     */
    public Boolean available() {
        return this.available;
    }
    /**
     * @return A set of features available in this region.
     * 
     */
    public List<String> features() {
        return this.features;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The display name of the region.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A set of identifying slugs for the Droplet sizes available in this region.
     * 
     */
    public List<String> sizes() {
        return this.sizes;
    }
    /**
     * @return A human-readable string that is used as a unique identifier for each region.
     * 
     */
    public String slug() {
        return this.slug;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean available;
        private List<String> features;
        private String id;
        private String name;
        private List<String> sizes;
        private String slug;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRegionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.available = defaults.available;
    	      this.features = defaults.features;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.sizes = defaults.sizes;
    	      this.slug = defaults.slug;
        }

        public Builder available(Boolean available) {
            this.available = Objects.requireNonNull(available);
            return this;
        }
        public Builder features(List<String> features) {
            this.features = Objects.requireNonNull(features);
            return this;
        }
        public Builder features(String... features) {
            return features(List.of(features));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder sizes(List<String> sizes) {
            this.sizes = Objects.requireNonNull(sizes);
            return this;
        }
        public Builder sizes(String... sizes) {
            return sizes(List.of(sizes));
        }
        public Builder slug(String slug) {
            this.slug = Objects.requireNonNull(slug);
            return this;
        }        public GetRegionResult build() {
            return new GetRegionResult(available, features, id, name, sizes, slug);
        }
    }
}
