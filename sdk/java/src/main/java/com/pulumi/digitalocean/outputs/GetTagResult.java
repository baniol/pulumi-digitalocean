// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTagResult {
    /**
     * @return A count of the database clusters that the tag is applied to.
     * 
     */
    private final Integer databasesCount;
    /**
     * @return A count of the Droplets the tag is applied to.
     * 
     */
    private final Integer dropletsCount;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return A count of the images that the tag is applied to.
     * 
     */
    private final Integer imagesCount;
    private final String name;
    /**
     * @return A count of the total number of resources that the tag is applied to.
     * 
     */
    private final Integer totalResourceCount;
    /**
     * @return A count of the volume snapshots that the tag is applied to.
     * 
     */
    private final Integer volumeSnapshotsCount;
    /**
     * @return A count of the volumes that the tag is applied to.
     * 
     */
    private final Integer volumesCount;

    @CustomType.Constructor
    private GetTagResult(
        @CustomType.Parameter("databasesCount") Integer databasesCount,
        @CustomType.Parameter("dropletsCount") Integer dropletsCount,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imagesCount") Integer imagesCount,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("totalResourceCount") Integer totalResourceCount,
        @CustomType.Parameter("volumeSnapshotsCount") Integer volumeSnapshotsCount,
        @CustomType.Parameter("volumesCount") Integer volumesCount) {
        this.databasesCount = databasesCount;
        this.dropletsCount = dropletsCount;
        this.id = id;
        this.imagesCount = imagesCount;
        this.name = name;
        this.totalResourceCount = totalResourceCount;
        this.volumeSnapshotsCount = volumeSnapshotsCount;
        this.volumesCount = volumesCount;
    }

    /**
     * @return A count of the database clusters that the tag is applied to.
     * 
     */
    public Integer databasesCount() {
        return this.databasesCount;
    }
    /**
     * @return A count of the Droplets the tag is applied to.
     * 
     */
    public Integer dropletsCount() {
        return this.dropletsCount;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A count of the images that the tag is applied to.
     * 
     */
    public Integer imagesCount() {
        return this.imagesCount;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return A count of the total number of resources that the tag is applied to.
     * 
     */
    public Integer totalResourceCount() {
        return this.totalResourceCount;
    }
    /**
     * @return A count of the volume snapshots that the tag is applied to.
     * 
     */
    public Integer volumeSnapshotsCount() {
        return this.volumeSnapshotsCount;
    }
    /**
     * @return A count of the volumes that the tag is applied to.
     * 
     */
    public Integer volumesCount() {
        return this.volumesCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer databasesCount;
        private Integer dropletsCount;
        private String id;
        private Integer imagesCount;
        private String name;
        private Integer totalResourceCount;
        private Integer volumeSnapshotsCount;
        private Integer volumesCount;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTagResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databasesCount = defaults.databasesCount;
    	      this.dropletsCount = defaults.dropletsCount;
    	      this.id = defaults.id;
    	      this.imagesCount = defaults.imagesCount;
    	      this.name = defaults.name;
    	      this.totalResourceCount = defaults.totalResourceCount;
    	      this.volumeSnapshotsCount = defaults.volumeSnapshotsCount;
    	      this.volumesCount = defaults.volumesCount;
        }

        public Builder databasesCount(Integer databasesCount) {
            this.databasesCount = Objects.requireNonNull(databasesCount);
            return this;
        }
        public Builder dropletsCount(Integer dropletsCount) {
            this.dropletsCount = Objects.requireNonNull(dropletsCount);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imagesCount(Integer imagesCount) {
            this.imagesCount = Objects.requireNonNull(imagesCount);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder totalResourceCount(Integer totalResourceCount) {
            this.totalResourceCount = Objects.requireNonNull(totalResourceCount);
            return this;
        }
        public Builder volumeSnapshotsCount(Integer volumeSnapshotsCount) {
            this.volumeSnapshotsCount = Objects.requireNonNull(volumeSnapshotsCount);
            return this;
        }
        public Builder volumesCount(Integer volumesCount) {
            this.volumesCount = Objects.requireNonNull(volumesCount);
            return this;
        }        public GetTagResult build() {
            return new GetTagResult(databasesCount, dropletsCount, id, imagesCount, name, totalResourceCount, volumeSnapshotsCount, volumesCount);
        }
    }
}
